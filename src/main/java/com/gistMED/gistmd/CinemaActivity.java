package com.gistMED.gistmd;import androidx.annotation.NonNull;import androidx.appcompat.app.AppCompatActivity;import android.content.Intent;import android.os.Bundle;import android.util.Log;import android.view.View;import android.widget.ImageView;import android.widget.TextView;import com.gistMED.gistmd.Classes.BlocksQueuePlayer;import com.gistMED.gistmd.Classes.Case;import com.gistMED.gistmd.Classes.StaticObjects;import com.gistMED.gistmd.Classes.ToolBarConfig;import com.google.firebase.database.DataSnapshot;import com.google.firebase.database.DatabaseError;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.ServerValue;import com.google.firebase.database.ValueEventListener;import com.google.firebase.storage.StorageReference;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.util.ArrayList;import java.util.HashMap;import java.util.LinkedHashMap;import java.util.Map;import bg.devlabs.fullscreenvideoview.FullscreenVideoView;public class CinemaActivity extends AppCompatActivity {    private FullscreenVideoView videoView;    private ImageView sendsms_button;    private TextView video_description;    private LinkedHashMap<String,String> blocksFromFlow = new LinkedHashMap<>();    private ArrayList<StorageReference> pathsForBlocks = new ArrayList<>();    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_cinema);        videoView = findViewById(R.id.fullscreenVideoView);        sendsms_button = findViewById(R.id.sendsms_button);        video_description = findViewById(R.id.video_description);        ToolBarConfig.ConfigToolBar(this);        GetPathsForBlocksFromSetAndStartVideo();        sendsms_button.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                SendSMS();            }        });   }    public void SendSMS() {       /* String smsBody=video_description.getText().toString();        Intent sendIntent = new Intent(Intent.ACTION_VIEW);        sendIntent.putExtra("sms_body", smsBody);        sendIntent.setType("vnd.android-dir/mms-sms");        startActivity(sendIntent);*/    }   private void copyFile(InputStream in, OutputStream out) throws IOException {       byte[] buffer = new byte[1024];       int read;       while((read = in.read(buffer)) != -1){           out.write(buffer, 0, read);       }   }   private void GetPathsForBlocksFromSetAndStartVideo()   {       GetFlowIDbySet(StaticObjects.set);   }   private void StartVideo()   {       try{           InputStream inputStream = getResources().openRawResource(R.raw.gist_logo_animation); //load local video to file obj           File tempFile = File.createTempFile("pre", "suf");           copyFile(inputStream, new FileOutputStream(tempFile));           BlocksQueuePlayer BlocksQueuePlayer = new BlocksQueuePlayer(pathsForBlocks,videoView,this,tempFile);           BlocksQueuePlayer.Start();       } catch (IOException e) {           throw new RuntimeException("Can't create temp file ", e);       }   }   private void CreatePathsForBlocks(LinkedHashMap<String,String> BlocksFromFlow)   {       for (Map.Entry<String, String> entry : BlocksFromFlow.entrySet()) {           String v = entry.getValue();           String childRef = getString(R.string.videoFolderName)+"/"+"Nikur"+"/"+v+"."+getString(R.string.videoFormat);           StorageReference ref = StaticObjects.mStorageRef.child(childRef);           pathsForBlocks.add(ref);           Log.e("ref", ref.toString());       }       StartVideo();    }    private void GetFlowIDbySet(final HashMap<String,String> set)    {        final HashMap<String,String> DBset = new HashMap<>();        final DatabaseReference ScenarioRef = StaticObjects.mDataBaseRef.child("scenario");        ScenarioRef.addListenerForSingleValueEvent(new ValueEventListener() {            @Override            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {                for(DataSnapshot ds:dataSnapshot.getChildren())                {                    for (DataSnapshot pare : ds.child("set").getChildren())                    {                        String k = pare.getKey();                        String v = pare.getValue(String.class);                        DBset.put(k,v);                    }                    Log.e("hash",DBset.toString());                    if(DBset.equals(set))                    {                        UploadCaseToDB(ds.getKey());                        GetBlocksByFlowID(ds.child("flow_id").getValue(String.class));                        break;                    }                }            }            @Override            public void onCancelled(@NonNull DatabaseError databaseError) {            }        });    }    private void UploadCaseToDB(String scenario_id)    {        String comments_id = StaticObjects.mDataBaseRef.child("comment_sections").push().getKey();        StaticObjects.mDataBaseRef.child("comment_sections").child(comments_id).child("hola").setValue("no comments");        Case Case = new Case(comments_id,scenario_id,StaticObjects.mConnecteduserinfo.getUserID(), com.gistMED.gistmd.Classes.Case.Condition.hospitalized.toString());        String caseUUID = StaticObjects.mDataBaseRef.child("cases").push().getKey();        StaticObjects.mDataBaseRef.child("cases").child(caseUUID).setValue(Case);        StaticObjects.mDataBaseRef.child("cases").child(caseUUID).child("timestamp").setValue(ServerValue.TIMESTAMP);        SetCaseTimeStamp(caseUUID,Case);        CreateAnswersRef(Case,caseUUID);    }    private void CreateAnswersRef(Case Case,String Caseuuid)    {        String AnswersID = StaticObjects.mDataBaseRef.child("answers").push().getKey();        StaticObjects.mDataBaseRef.child("answers").child(AnswersID).child("id1").setValue("0");        StaticObjects.mDataBaseRef.child("cases").child(Caseuuid).child("answers_id").setValue(AnswersID);        Case.setAnswers_id(AnswersID);    }    private void SetCaseTimeStamp(String caseUUID, final Case Case)    {        StaticObjects.mDataBaseRef.child("cases").child(caseUUID).child("timestamp").addListenerForSingleValueEvent(new ValueEventListener() {            @Override            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {                Case.setTimestamp(dataSnapshot.getValue(long.class));            }            @Override            public void onCancelled(@NonNull DatabaseError databaseError) {            }        });    }    private void GetBlocksByFlowID(String FlowID)    {        StaticObjects.mDataBaseRef.child("flows").child(FlowID).addListenerForSingleValueEvent(new ValueEventListener() {            @Override            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {                for (DataSnapshot ds : dataSnapshot.getChildren())                {                    String k = ds.getKey();                    String v = ds.getValue(String.class);                    blocksFromFlow.put(k,v);                }                Log.e("hashmap", blocksFromFlow.toString());                CreatePathsForBlocks(blocksFromFlow);            }            @Override            public void onCancelled(@NonNull DatabaseError databaseError) {            }        });    }}